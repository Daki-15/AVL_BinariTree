Node *deleteNode(int value, Node *root){

    if(root == NULL){
        return root;
    }

    if(value < root->value){
        root->left = deleteNode(value, root->left);
    } else if(value > root->value){
        root->right=deleteNode(value, root->right);
    } else {
        if( (root->left == NULL) || (root->right == NULL) ){
            Node *temp=root->left ? root->left:root->right;

            if(temp == NULL){
                temp = root;
                root=NULL;
            } else root=temp;
        free(temp);
        } else{
            Node *temp = minValue(root->right);
            root->value=temp->value;
            root->right=deleteNode(value, root->right);
        }
    }
    if(root==NULL) return root;

    root->height = 1 + max(height(root->left), height(root->right));

    int balance=getBalance(root);

    if( (balance > 1) && getBalance(root->left) >= 0 ){
        return rightRotate(root);
    }

    if( (balance > 1) && getBalance(root->left)<0){
        root->left = leftRotate(root->left);
        return rightRotate(root);
    }

    if (balance < -1 && getBalance(root->right) <= 0)
    return leftRotate(root);

    if (balance < -1 && getBalance(root->right) > 0) {
        root->right = rightRotate(root->right);
        return leftRotate(root);
    }

    return root;
}
