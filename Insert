Node *insertNode(int value, Node *root){
    // Find the correct position to insertNode
    if(root == NULL){
        return newNode(value);
    }

    if(value < root->value){
        root->left=insertNode(value, root->left);
    } else if(value > root->value){
        root->right=insertNode(value, root->right);
    } else return root;

    // Update the balance factor of each node and balance the tree
    root->height = 1 + max(height(root->left), height(root->right));

    int balance = getBalance(root);

    if( (balance > 1) && (value < root->left->value) ){
        return rightRotate(root);
    }

    if( (balance < -1 ) && (value > root->right->value) ){
        return leftRotate(root);
    }

    if( (balance > 1 )&& (value > root->left->value) ){
        root->left = leftRotate(root->left);
        return rightRotate(root);
    }

    if( (balance < -1) && (value < root->right->value) ){
        root->right=rightRotate(root->right);
        return leftRotate(root);
    }

    return root;
}
